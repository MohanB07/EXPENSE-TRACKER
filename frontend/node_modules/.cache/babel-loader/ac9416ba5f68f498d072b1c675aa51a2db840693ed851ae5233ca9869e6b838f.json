{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mohan\\\\OneDrive\\\\Desktop\\\\MoneyFlowManager - Copy\\\\frontend\\\\src\\\\context\\\\globalContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// globalContext.js\n\nimport React, { useContext, useState } from \"react\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BASE_URL = \"http://localhost:5000/api/v1/\";\nconst GlobalContext = /*#__PURE__*/React.createContext();\nexport const GlobalProvider = ({\n  children\n}) => {\n  _s();\n  const [incomes, setIncomes] = useState([]);\n  const [expenses, setExpenses] = useState([]);\n  const [error, setError] = useState(null);\n  const addIncome = async income => {\n    const response = await axios.post(`${BASE_URL}add-income`, income).catch(err => {\n      setError(err.response.data.message);\n    });\n    getIncomes();\n  };\n  const getIncomes = async () => {\n    const response = await axios.get(`${BASE_URL}get-incomes`);\n    setIncomes(response.data);\n  };\n  const deleteIncome = async id => {\n    const res = await axios.delete(`${BASE_URL}delete-income/${id}`);\n    getIncomes();\n  };\n  const totalIncome = () => {\n    let totalIncome = 0;\n    incomes.forEach(income => {\n      totalIncome = totalIncome + income.amount;\n    });\n    return totalIncome;\n  };\n  const addExpense = async income => {\n    const response = await axios.post(`${BASE_URL}add-expense`, income).catch(err => {\n      setError(err.response.data.message);\n    });\n    getExpenses();\n  };\n  const getExpenses = async () => {\n    const response = await axios.get(`${BASE_URL}get-expenses`);\n    setExpenses(response.data);\n  };\n  const deleteExpense = async id => {\n    const res = await axios.delete(`${BASE_URL}delete-expense/${id}`);\n    getExpenses();\n  };\n  const totalExpenses = () => {\n    let totalIncome = 0;\n    expenses.forEach(income => {\n      totalIncome = totalIncome + income.amount;\n    });\n    return totalIncome;\n  };\n  const totalBalance = () => {\n    return totalIncome() - totalExpenses();\n  };\n  const transactionHistory = () => {\n    const history = [...incomes, ...expenses];\n    history.sort((a, b) => {\n      return new Date(b.createdAt) - new Date(a.createdAt);\n    });\n    return history.slice(0, 3);\n  };\n  const getDropdownOptions = async () => {\n    try {\n      const response = await axios.get(`${BASE_URL}dropdown-options`);\n      const {\n        incomeCategories,\n        expenseCategories,\n        startDate,\n        endDate\n      } = response.data;\n      // Set options in your state or use them directly as needed\n      // Example: setIncomeCategories(incomeCategories);\n      // Example: setExpenseCategories(expenseCategories);\n      // Example: setStartDate(startDate);\n      // Example: setEndDate(endDate);\n    } catch (error) {\n      console.error(error);\n      setError('Error fetching dropdown options');\n    }\n  };\n  const generateReport = async filterOptions => {\n    try {\n      const response = await axios.get(`${BASE_URL}generate-report`, {\n        params: filterOptions\n      });\n      const {\n        incomeData,\n        expenseData,\n        totalIncome,\n        totalExpense\n      } = response.data;\n      // Set report data in your state or use it directly as needed\n      // Example: setIncomeData(incomeData);\n      // Example: setExpenseData(expenseData);\n      // Example: setTotalIncome(totalIncome);\n      // Example: setTotalExpense(totalExpense);\n    } catch (error) {\n      console.error(error);\n      setError('Error generating report');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(GlobalContext.Provider, {\n    value: {\n      addIncome,\n      getIncomes,\n      incomes,\n      deleteIncome,\n      expenses,\n      totalIncome,\n      addExpense,\n      getExpenses,\n      deleteExpense,\n      totalExpenses,\n      totalBalance,\n      transactionHistory,\n      getDropdownOptions,\n      generateReport,\n      error,\n      setError\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 9\n  }, this);\n};\n_s(GlobalProvider, \"tEtYkz3TSUkMCKA3FBENwBvPpJ4=\");\n_c = GlobalProvider;\nexport const useGlobalContext = () => {\n  _s2();\n  return useContext(GlobalContext);\n};\n_s2(useGlobalContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"GlobalProvider\");","map":{"version":3,"names":["React","useContext","useState","axios","jsxDEV","_jsxDEV","BASE_URL","GlobalContext","createContext","GlobalProvider","children","_s","incomes","setIncomes","expenses","setExpenses","error","setError","addIncome","income","response","post","catch","err","data","message","getIncomes","get","deleteIncome","id","res","delete","totalIncome","forEach","amount","addExpense","getExpenses","deleteExpense","totalExpenses","totalBalance","transactionHistory","history","sort","a","b","Date","createdAt","slice","getDropdownOptions","incomeCategories","expenseCategories","startDate","endDate","console","generateReport","filterOptions","params","incomeData","expenseData","totalExpense","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useGlobalContext","_s2","$RefreshReg$"],"sources":["C:/Users/mohan/OneDrive/Desktop/MoneyFlowManager - Copy/frontend/src/context/globalContext.js"],"sourcesContent":["// globalContext.js\r\n\r\nimport React, { useContext, useState } from \"react\";\r\nimport axios from 'axios';\r\n\r\nconst BASE_URL = \"http://localhost:5000/api/v1/\";\r\n\r\nconst GlobalContext = React.createContext();\r\n\r\nexport const GlobalProvider = ({children}) => {\r\n\r\n    const [incomes, setIncomes] = useState([]);\r\n    const [expenses, setExpenses] = useState([]);\r\n    const [error, setError] = useState(null);\r\n\r\n    const addIncome = async (income) => {\r\n        const response = await axios.post(`${BASE_URL}add-income`, income)\r\n            .catch((err) =>{\r\n                setError(err.response.data.message);\r\n            });\r\n        getIncomes();\r\n    };\r\n\r\n    const getIncomes = async () => {\r\n        const response = await axios.get(`${BASE_URL}get-incomes`);\r\n        setIncomes(response.data);\r\n    };\r\n\r\n    const deleteIncome = async (id) => {\r\n        const res  = await axios.delete(`${BASE_URL}delete-income/${id}`);\r\n        getIncomes();\r\n    };\r\n\r\n    const totalIncome = () => {\r\n        let totalIncome = 0;\r\n        incomes.forEach((income) =>{\r\n            totalIncome = totalIncome + income.amount;\r\n        });\r\n\r\n        return totalIncome;\r\n    };\r\n\r\n    const addExpense = async (income) => {\r\n        const response = await axios.post(`${BASE_URL}add-expense`, income)\r\n            .catch((err) =>{\r\n                setError(err.response.data.message);\r\n            });\r\n        getExpenses();\r\n    };\r\n\r\n    const getExpenses = async () => {\r\n        const response = await axios.get(`${BASE_URL}get-expenses`);\r\n        setExpenses(response.data);\r\n    };\r\n\r\n    const deleteExpense = async (id) => {\r\n        const res  = await axios.delete(`${BASE_URL}delete-expense/${id}`);\r\n        getExpenses();\r\n    };\r\n\r\n    const totalExpenses = () => {\r\n        let totalIncome = 0;\r\n        expenses.forEach((income) =>{\r\n            totalIncome = totalIncome + income.amount;\r\n        });\r\n\r\n        return totalIncome;\r\n    };\r\n\r\n    const totalBalance = () => {\r\n        return totalIncome() - totalExpenses();\r\n    };\r\n\r\n    const transactionHistory = () => {\r\n        const history = [...incomes, ...expenses];\r\n        history.sort((a, b) => {\r\n            return new Date(b.createdAt) - new Date(a.createdAt);\r\n        });\r\n\r\n        return history.slice(0, 3);\r\n    };\r\n\r\n    const getDropdownOptions = async () => {\r\n        try {\r\n            const response = await axios.get(`${BASE_URL}dropdown-options`);\r\n            const { incomeCategories, expenseCategories, startDate, endDate } = response.data;\r\n            // Set options in your state or use them directly as needed\r\n            // Example: setIncomeCategories(incomeCategories);\r\n            // Example: setExpenseCategories(expenseCategories);\r\n            // Example: setStartDate(startDate);\r\n            // Example: setEndDate(endDate);\r\n        } catch (error) {\r\n            console.error(error);\r\n            setError('Error fetching dropdown options');\r\n        }\r\n    };\r\n\r\n    const generateReport = async (filterOptions) => {\r\n        try {\r\n            const response = await axios.get(`${BASE_URL}generate-report`, { params: filterOptions });\r\n            const { incomeData, expenseData, totalIncome, totalExpense } = response.data;\r\n            // Set report data in your state or use it directly as needed\r\n            // Example: setIncomeData(incomeData);\r\n            // Example: setExpenseData(expenseData);\r\n            // Example: setTotalIncome(totalIncome);\r\n            // Example: setTotalExpense(totalExpense);\r\n        } catch (error) {\r\n            console.error(error);\r\n            setError('Error generating report');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <GlobalContext.Provider value={{\r\n            addIncome,\r\n            getIncomes,\r\n            incomes,\r\n            deleteIncome,\r\n            expenses,\r\n            totalIncome,\r\n            addExpense,\r\n            getExpenses,\r\n            deleteExpense,\r\n            totalExpenses,\r\n            totalBalance,\r\n            transactionHistory,\r\n            getDropdownOptions,\r\n            generateReport,\r\n            error,\r\n            setError\r\n        }}>\r\n            {children}\r\n        </GlobalContext.Provider>\r\n    );\r\n};\r\n\r\nexport const useGlobalContext = () =>{\r\n    return useContext(GlobalContext);\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}